Определение массива ||| Упорядоченное множество однотипных переменных (элементов массива), которым можно присвоить общее имя, различающихся номерами (индексами), называют массивом. || Элемент массива. Действия с элементами массива ||| Все элементы массива должны быть одного типа. Номер элемента в последовательности называется индексом. Количество элементов в массиве не может быть изменено в процессе выполнения программы. Элементы массива размещаются в памяти последовательно и нумеруются от 1 до n, где n – их количество в массиве. К каждому элементу массива имеется прямой доступ. Это означает, что для того чтобы обратиться к какому-либо элементу массива, нет нужды перебирать все его предыдущие элементы, достаточно указать номер этого элемента.
Действия, которые можно выполнять с элементами массива: находить сумму/разность/произведение элементов, находить максимум и минимум, записывать элементы одного массива в другой, т.е. выполнять все действия, что и с переменными.
 || Примеры описания массивов ||| В языке Паскаль тип массива задается с использованием специального слова array (англ. – массив), и его объявление в программе выглядит следующим образом:

Type < имя _ типа >= array [ I ] of T;
где I – тип индекса массива, T – тип его элементов.
Можно описывать сразу переменные типа массив, т.е. в разделе описания переменных:
Var a,b: array [ I ] of T;
Например, var a: array [1 .. 10] of integer. Целочисленный массив, в котором 10 элементов.
 || Понятие размерности массива ||| Размерность массива— количество индексов, по которым определяется положение элемента в массиве. Массивы бывают одномерными и многомерными. 
Одномерный массив сравним с таблицей, состоящей из одной строки. Для определения положения элемента в строке  достаточно знать порядковый номер ячейки, в которой находится элемент. Поэтому в одномерном массиве один индекс  — порядковый номер элемента.
Двумерный массив — прямоугольная таблица. Для определения положения элемента в прямоугольной таблице нужно знать порядковый номер строки и столбца, на пересечении которых находится ячейка. Поэтому в двумерном массиве — два индекса, номер строки и номер столбца.
 || Формирование массива ||| Сформировать массив или таблицу  – значит присвоить элементам этого массива определённые значения.
1. Ввод значения с клавиатуры.
2. Задание значений в операторе присваивания с помощью генератора случайных чисел. Этот способ более удобен, когда много элементов в массиве (ввод их значений с клавиатуры занимает много времени).
3. Задание значений по формуле.
4. Ввод элементов массива из файла
 || Определение массива (С++) ||| Массив это структура данных, представленная в виде группы ячеек одного типа, объединенных под одним единым именем. Массивы используются для обработки большого количества однотипных данных. Всегда сразу после имени массива идут квадратные скобки, в которых задается размер массива, этим массив и отличается от всех остальных переменных.
 || Элемент массива, действия с элементами массива ||| Каждая из переменных в массиве называется элементом. Элементы не имеют своих собственных уникальных имен. Вместо этого для доступа к ним используется имя массива вместе с оператором индекса [] и параметром, который называется индексом, и который сообщает компилятору, какой элемент мы хотим выбрать. Этот процесс называется индексированием массива.
Действия:
1. ввод/вывод элементов массива - происходит в цикле от 0 до количества элементов с помощью операций ввода/вывода (cin/cout)
for (i:=1;i<n;i++)
{
  cin>>mas[i];
}
2. копирование элементов из одного массива в другой
также можно организовать с помощью цикла: i-му элементу второго массива присвоить i-й элемент 1го.
for (i:=1;i<n;i++)
{
   mas2[i] = mas1[i];
}

3. поиск элемента по заданному условию
4. поиск максимального и минимального элемента массива
5. умножение/деление элементов массива на 1 и то же число
6. прибавление, вычитание одного и того же числа из элементов массива
7. перестановка элементов массива
8. вычисление суммы/произведения элементов массива
 || Примеры описания массивов ||| Для того чтобы использовать массивы в своих программах, его надо сначала объявить. Для этого нужно использовать следующею конструкцию:
<тип элементов массива>  <имя массива>  [<количество элементов в массиве>]
Например: int array[15] - массив с именем array из 15 элементов целого типа.
Также можно использовать и другие типы данных для хранения их в массиве.
Например: 
* float chisla[10] - массив с именем float из 10 элементов вещественного типа;
* char alphavit[32] - массив с именем alphavit из 32 элементов символьного типа.
Возможен и такой вариант объявления массива:
const int N = 15; // константа N задает количество элементов в массиве
float array[N]; // объявление массива
Также при инициализации (создании) массива можно сразу задать значения его элементам следующими способами:
* int arr[] = {0, 1, 2, 3, 4, 5} -  массив будет из 6 элементов (от 0 до 5), при этом размерность массива в квадратных скобках можно не задавать;
* int mas[100] = {1} -  все 100 элементов будут иметь значение 1.
 || Понятие размерности массива ||| Размерность массива - это количество элементов в массиве. Размерность и тип элементов массива определяют объем памяти, необходимый для хранения массива.
Например, объявлен массив int array[15]. Тогда размерность массива array составляет 15 элементов.
 || Способы формирования массивов ||| Существует 3 способа формирования и заполнения массивов на языке программирования С++: заполнение массива вручную пользователем, заполнение массива по формуле и заполнение массива случайными числами. 

При заполнении массива вручную пользователь самостоятельно вводит значения каждого элемента, используя стандартные операции ввода и вывода.

При заполнении массива по формуле массив перебирается с помощью цикла, а в цикле вычисляется значение каждого элемента. После выполнения цикла массив заполнен.

При заполнении массива случайными числами необходимо работать с директивой <cstdlib>, которая должна быть подключена в начале программы. Если мы хотим заполнить массив целыми числами, лежащими в промежутке [a;b], то необходимо делать это по следующей формуле:
mas[i] = a + rand() % (b-a+1)
При заполнении из файла используются потоки
 || 